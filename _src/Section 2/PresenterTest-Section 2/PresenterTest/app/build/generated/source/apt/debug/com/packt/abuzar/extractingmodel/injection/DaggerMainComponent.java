// Generated by Dagger (https://google.github.io/dagger).
package com.packt.abuzar.extractingmodel.injection;

import com.packt.abuzar.extractingmodel.MainPresenter;
import com.packt.abuzar.extractingmodel.MainPresenter_MembersInjector;
import com.packt.abuzar.extractingmodel.ProjectModel;
import com.packt.abuzar.extractingmodel.ProjectRepository;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.List;
import javax.inject.Provider;

public final class DaggerMainComponent implements MainComponent {
  private Provider<List<ProjectModel>> provideProjectListProvider;

  private Provider<ProjectRepository> provideProjectRepositoryProvider;

  private DaggerMainComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideProjectListProvider =
        DoubleCheck.provider(ProjectModule_ProvideProjectListFactory.create(builder.projectModule));
    this.provideProjectRepositoryProvider =
        DoubleCheck.provider(
            ProjectModule_ProvideProjectRepositoryFactory.create(
                builder.projectModule, provideProjectListProvider));
  }

  @Override
  public void inject(MainApplication mainApplication) {}

  @Override
  public void inject(MainPresenter mainPresenter) {
    injectMainPresenter(mainPresenter);
  }

  private MainPresenter injectMainPresenter(MainPresenter instance) {
    MainPresenter_MembersInjector.injectProjectRepository(
        instance, provideProjectRepositoryProvider.get());
    return instance;
  }

  public static final class Builder {
    private ProjectModule projectModule;

    private Builder() {}

    public MainComponent build() {
      if (projectModule == null) {
        throw new IllegalStateException(ProjectModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerMainComponent(this);
    }

    public Builder projectModule(ProjectModule projectModule) {
      this.projectModule = Preconditions.checkNotNull(projectModule);
      return this;
    }
  }
}
